@using DnTeam.Models
@model ProjectModel

<p>
    <a id="addAssignment" class="t-button t-button-icontext"><span class="t-icon t-add"></span>Add a New Assignment</a>
    <a id="editAssignment" class="t-button t-button-icontext"><span class="t-icon t-edit"></span>Edit Selected Assignment</a>
    <a id="deleteAssignments" class="t-button t-button-icontext"><span class="t-icon t-delete"></span>Delete Selected Assignments</a>    
    <a id="clearFilterAssignment" class="t-button t-button-icontext"><span class="t-icon t-clear-filter"></span>Clear Filter</a>
</p>
    @(Html.Telerik().Grid<AssignmentModel>()
        .Name("AssignmentsGrid").Sortable().Pageable()
        .DataBinding(dataBinding => dataBinding.Ajax().Select("Select", "Assignment", new { projectId = Model.Id }))
        .Columns(columns =>
        {
            columns.Bound(o => o.AssignmentId).Sortable(false).ClientTemplate("<input type='checkbox' name='checkedAssignments' value='<#= AssignmentId #>' />").Title("").Width(50).HtmlAttributes(new { style = "text-align:center" });
            columns.Bound(o => o.Role).HeaderHtmlAttributes(new { filterable_column = "Role" });
            columns.Bound(o => o.Person).HeaderHtmlAttributes(new { filterable_column = "Person" });
            columns.Bound(o => o.Note).HeaderHtmlAttributes(new { filterable_column = "Note" });
            columns.Bound(o => o.StartDate).Width(200).HeaderHtmlAttributes(new { filterable_column = "StartDate" });
            columns.Bound(o => o.EndDate).Width(200).HeaderHtmlAttributes(new { filterable_column = "EndDate" });
            columns.Bound(o => o.Commitment).Width(50).HeaderHtmlAttributes(new { filterable_column = "Commitment" });
        }))

@{Html.Telerik().Window().Name("AssignmentEditWindow").Title("Insert").Content(
      @<text>
    @using (Html.BeginForm("Insert", "Project", FormMethod.Post, new { id = "AssignmentEditForm" }))
    {
        @Html.Hidden("AssignmentId")
        <div class="editLine" style="padding-bottom: 30px;">
            <div class="editElement">
                <div class="editor-label">
                   Role
                </div>
                <div class="editor-field">
                    @(Html.Telerik().ComboBox().Name("AssignmentRole").BindTo(ViewData["ProjectRoles"] as SelectList)
                        .Filterable(filtering => filtering.FilterMode(AutoCompleteFilterMode.StartsWith)).HighlightFirstMatch(true))                   
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                   Person
                </div>
                <div class="editor-field">
                   @(Html.Telerik().DropDownList().Name("AssignmentPerson").BindTo(ViewData["PersonsList"] as SelectList))
                </div>
            </div>  
            <div class="editElement">
                <div class="editor-label">
                   Assignment
                </div>
                <div class="editor-field">
                   @Html.TextBox("AssignmentNote","",new {style="width:300px;"})
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                   Start Date
                </div>
                <div class="editor-field">
                  @Html.Telerik().DatePicker().Name("AssignmentStartDate").Value(DateTime.Now.Date)
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                   End Date
                </div>
                <div class="editor-field">
                  @Html.Telerik().DatePicker().Name("AssignmentEndDate").Value(DateTime.Now.Date)
                </div>
            </div>   
             <div class="editElement">
                <div class="editor-label">
                   Commitment
                </div>
                <div class="editor-field">
                  @(Html.Telerik().CurrencyTextBox().Name("AssignmentCommitment").MinValue(0).MaxValue(100).IncrementStep(10).CurrencySymbol("% ").DecimalDigits(0).Value(100)
                    .InputHtmlAttributes(new {style="width:80px;"}))
                </div>
            </div>                 
        </div>   
    }
    <div id="editAssignmentResult" class="editLine"></div>            
                <div class="editLine" style="padding-top: 20px;">
                    <a class="t-button t-button-icontext yesButton" onclick="saveAssignment()"><span class="t-icon t-insert"></span><label>Insert</label></a>
                    <a class="t-button t-button-icontext noButton" onclick="closeWindow('AssignmentEditWindow')"><span class="t-icon t-cancel"></span><label>Cancel</label></a>
                    <a id="clearFilterAssignment" class="t-button t-button-icontext"><span class="t-icon t-clear-filter"></span>Clear Filter</a>
                </div>
      </text>).Visible(false).Draggable(true).Scrollable(false).Modal(true).Render();}

 <script type="text/javascript">
function saveAssignment() {
    var assignmentId = $("#AssignmentId").val();
    var role = $("#AssignmentRole").data("tComboBox").value();
    var person = $("#AssignmentPerson").data("tDropDownList").value();
    var note = $("#AssignmentNote").val();
    var startDate = $('#AssignmentStartDate').data("tDatePicker").value();
    if (startDate == null) {
        showError($("#editAssignmentResult"), "Plese, enter valid Start Date.", "AssignmentEditWindow");
    }
    var endDate = $('#AssignmentEndDate').data("tDatePicker").value();
    if (endDate == null) {
        showError($("#editAssignmentResult"), "Plese, enter valid End Date.", "AssignmentEditWindow");
    }
    var commitment = $('#AssignmentCommitment').data("tTextBox").value();

    $.post('@Url.Action("Save", "Assignment")', { id: '@(Model.Id)', assignmentId: assignmentId, role: role, person: person, note: note, startDate: startDate.toDateString(), endDate: endDate.toDateString(), commitment: commitment }, function (data) {
        if (data == null) {
            $("#AssignmentsGrid").data("tGrid").ajaxRequest();
            closeWindow("AssignmentEditWindow");
        } else {
            showError($("#editAssignmentResult"), data, "AssignmentEditWindow");
        }
    }, 'json');
}
$().ready(function () {

    //bind grid filter
    $("#AssignmentsGrid").gridFilter({ postUrl: '@(Url.Action("Select", "Assignment", new { projectId = Model.Id }))', btnClearFilter: $("#clearFilterAssignment"), gridInstance: function () {
        return $("#AssignmentsGrid").data("tGrid");
    }});
    
    
    
    //Open insert window
    $("#addAssignment").click(function (e) {
        e.preventDefault();

        $("#AssignmentId").val("");
        $("#AssignmentRole").data("tComboBox").value("");
        $("#AssignmentPerson").data("tDropDownList").select(0);
        $("#AssignmentNote").val("");
        $('#AssignmentStartDate').data("tDatePicker").value(new Date());
        $('#AssignmentEndDate').data("tDatePicker").value(new Date());
        $('#AssignmentCommitment').data("tTextBox").value(100);
        
        openWindow('AssignmentEditWindow', 'Insert', 'Insert', 'saveAssignment()');
    });

    //Open edit window
    $("#editAssignment").click(function (e) {
        e.preventDefault();
        var values = new Array();
        $("input:checkbox[name=checkedAssignments]:checked").each(function () {
            values.push($(this));
        });

        if (values.length != 1) {
            alert("Please, check a Assignment to edit.");
        } else {
            //get cell values
            var ths = values[0].closest('tr').children('td');
            $("#AssignmentId").val(values[0].val());
            $("#AssignmentRole").data("tComboBox").value(ths[1].innerHTML);
            $("#AssignmentPerson").data("tDropDownList").text(ths[2].innerHTML);
            $("#AssignmentNote").val(ths[3].innerHTML);
            $('#AssignmentStartDate').data("tDatePicker").value(ths[4].innerHTML);
            $('#AssignmentEndDate').data("tDatePicker").value(ths[5].innerHTML);
            $('#AssignmentCommitment').data("tTextBox").value(ths[6].innerHTML);
            
            openWindow('AssignmentEditWindow', 'Edit', 'Save', 'saveAssignment()');
        }
    });

    //Delete selected values
    $("#deleteAssignments").click(function (e) {
        e.preventDefault();

        var values = new Array();
        $("input:checkbox[name=checkedAssignments]:checked").each(function () {
            values.push($(this).val());
        });

        if (values.length <= 0) {
            alert("Please, check Assignments to be deleted.");
        } else {
            if (confirm("Are you sure you want to delete these Assignments?")) {
                $.ajax({
                    type: 'POST',
                    url: '@(Url.Action("Delete", "Assignment"))',
                    dataType: 'json',
                    traditional: true,
                    data: { projectId: '@(Model.Id)', values: values },
                    success: function () {
                        $("#AssignmentsGrid").data("tGrid").ajaxRequest();
                    }
                });
            }
        }
    });
});
 </script>