@using DnTeam.Models
@model ProjectModel

<p>
    <a id="addMilestone" class="t-button t-button-icontext"><span class="t-icon t-add"></span>@Resources.Labels.Milestone_Add_a_New</a>
    <a id="editMilestone" class="t-button t-button-icontext"><span class="t-icon t-edit"></span>@Resources.Labels.Milestone_Edit_Selected</a>
    <a id="deleteMilestones" class="t-button t-button-icontext"><span class="t-icon t-delete"></span>@Resources.Labels.Milestone_Delete_Selected</a>   
    <a id="finishMilestones" class="t-button t-button-icontext"><span class="t-icon t-insert"></span>@Resources.Labels.Milestone_Finish_Selected</a>
    <a id="clearFilterMilestone" class="t-button t-button-icontext"><span class="t-icon t-clear-filter"></span>@Resources.Labels.Clear_Filter</a>
</p>
    @(Html.Telerik().Grid<MilestoneModel>()
        .Name("MilestoneGrid").Sortable()
        .DataBinding(dataBinding => dataBinding.Ajax().Select("Select", "Milestone", new { projectId = Model.Id }))
        .Columns(columns =>
        {
            columns.Bound(o => o.MilestoneId).Sortable(false).ClientTemplate("<input type='checkbox' name='checkedMilestones' value='<#= MilestoneId #>' />").Title("").Width(50).HtmlAttributes(new { style = "text-align:center" });
            columns.Bound(o => o.Name).HeaderHtmlAttributes(new { filterable_column = "Name" });
            columns.Bound(o => o.TargetDate).Width(120).HeaderHtmlAttributes(new { filterable_column = "TargetDate" });
            columns.Bound(o => o.ActualDate).Width(120).HeaderHtmlAttributes(new { filterable_column = "ActualDate" });
            columns.Bound(o => o.Status).Width(50).Encoded(false).HtmlAttributes(new { style = "text-align:center" });
        }))

@{Html.Telerik().Window().Name("MilestoneEditWindow").Title(Resources.Labels.Window_Title_Insert).Content(@<text>
    @using (Html.BeginForm("Insert", "Project", FormMethod.Post, new { id = "MilestoneEditForm" }))
    {
        @Html.Hidden("MilestoneId")
        <div class="editLine" style="padding-bottom: 30px;">
            <div class="editElement">
                <div class="editor-label">
                   @Resources.Labels.Milestone_Name
                </div>
                <div class="editor-field">
                   @Html.TextBox("MilestoneName", "", new { data_val_required ="Required" })
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                   @Resources.Labels.Milestone_Target_Date
                </div>
                <div class="editor-field">
                   @Html.Telerik().DatePicker().Name("MilestoneTargetDate")
                </div>
            </div>  
            <div class="editElement">
                <div class="editor-label">
                   @Resources.Labels.Milestone_Actual_Date
                </div>
                <div class="editor-field">
                   @Html.Telerik().DatePicker().Name("MilestoneActualDate")
                </div>
            </div>                
        </div>   
    }
    <div id="editMilestoneResult" class="editLine"></div>            
                <div class="editLine" style="padding-top: 20px;">
                    <a class="t-button t-button-icontext yesButton" onclick="saveMilestone()"><span class="t-icon t-insert"></span><label>@Resources.Labels.Window_Button_Insert</label></a>
                    <a class="t-button t-button-icontext noButton" onclick="closeWindow('MilestoneEditWindow')"><span class="t-icon t-cancel"></span><label>@Resources.Labels.Window_Button_Cancel</label></a>
                </div>
      </text>).Visible(false).Draggable(true).Scrollable(false).Modal(true).Render();}

 <script type="text/javascript">
function saveMilestone() {
    var milestoneId = $("#MilestoneId").val();
    var name = $("#MilestoneName").val();
    var targetDate = $('#MilestoneTargetDate').data("tDatePicker").value();
    targetDate = (targetDate == null) ? "" : targetDate.toDateString();
    var actualDate = $('#MilestoneActualDate').data("tDatePicker").value();
    actualDate = (actualDate == null) ? "" : actualDate.toDateString();
    
    $.post('@Url.Action("Save", "Milestone")', { id: '@(Model.Id)', milestoneId: milestoneId, name: name, targetDate: targetDate, actualDate: actualDate }, function (data) {
        if (data == null) {
            $("#MilestoneGrid").data("tGrid").ajaxRequest();
            closeWindow("MilestoneEditWindow");
        } else {
            showError($("#editMilestoneResult"), data, "MilestoneEditWindow");
        }
    }, 'json');
}
$().ready(function () {
    //bind grid filter
    $("#MilestoneGrid").gridFilter({ postUrl: '@(Url.Action("Select", "Milestone", new { projectId = Model.Id }))', btnClearFilter: $("#clearFilterMilestone"), gridInstance: function () {
        return $("#MilestoneGrid").data("tGrid");
    }});
    
         //Open insert window
         $("#addMilestone").click(function (e) {
             e.preventDefault();
             
             $("#MilestoneId").val("");
             $("#MilestoneName").val("");
             $("#MilestoneName").removeAttr("readonly", "readonly");
             $('#MilestoneTargetDate').data("tDatePicker").value("");
             $('#MilestoneActualDate').data("tDatePicker").value("");

             openWindow('MilestoneEditWindow', '@(Resources.Labels.Window_Title_Insert)', '@(Resources.Labels.Window_Button_Insert)', 'saveMilestone()');
         });

         //Open edit window
         $("#editMilestone").click(function (e) {
             e.preventDefault();
             var values = new Array();
             $("input:checkbox[name=checkedMilestones]:checked").each(function () {
                 values.push($(this));
             });

            if (values.length != 1) {
                alert("@(Resources.Labels.Milestone_Error_Edit_Nothing)");
            } else {
                //get cell values
                var ths = values[0].closest('tr').children('td');
                $("#MilestoneId").val(values[0].val());
                $("#MilestoneName").val(ths[1].innerHTML);
                $("#MilestoneName").attr("readonly", "readonly");
                $('#MilestoneTargetDate').data("tDatePicker").value(ths[2].innerHTML);
                $('#MilestoneActualDate').data("tDatePicker").value(ths[3].innerHTML);

                openWindow('MilestoneEditWindow', '@(Resources.Labels.Window_Title_Edit)', '@(Resources.Labels.Window_Button_Save)', 'saveMilestone()');
            }
         });

         //Delete selected values
         $("#deleteMilestones").click(function (e) {
             e.preventDefault();

             var values = new Array();
             $("input:checkbox[name=checkedMilestones]:checked").each(function () {
                 values.push($(this).val());
             });

             if (values.length <= 0) {
                 alert("@(Resources.Labels.Milestone_Error_Delete_Nothing)");
             } else {
                 if (confirm("@(Resources.Labels.Milestone_Delete_Are_You_Sure)")) {
                     $.ajax({
                         type: 'POST',
                         url: '@(Url.Action("Delete", "Milestone"))',
                         dataType: 'json',
                         traditional: true,
                         data: { projectId: '@(Model.Id)', values: values },
                         success: function () {
                             $("#MilestoneGrid").data("tGrid").ajaxRequest();
                         }
                     });
                 }
             }
         });

         //Make completed edit window
         $("#finishMilestones").click(function (e) {
             e.preventDefault();
             var values = new Array();
             $("input:checkbox[name=checkedMilestones]:checked").each(function () {
                 values.push($(this).val());
             });

             if (values.length <= 0) {
                 alert("@(Resources.Labels.Milestone_Error_Complete_Nothing)");
             } else {
                 $.ajax({
                     type: 'POST',
                     url: '@(Url.Action("Finish", "Milestone"))',
                     dataType: 'json',
                     traditional: true,
                     data: { projectId: '@(Model.Id)', values: values },
                     success: function () {
                         $("#MilestoneGrid").data("tGrid").ajaxRequest();
                     }
                 });
             }
         });
     });
 </script>