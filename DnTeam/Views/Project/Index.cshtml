@using DnTeam.Models
@model ProjectGridModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Projects</h2>
<p>
    <a id="addNewValue" class="t-button t-button-icontext"><span class="t-icon t-add"></span>Add a New Project</a>    
    <a id="viewValues" class="t-button t-button-icontext"><img class="t-icon" src="@(Url.Content("~/Content/link.png"))" />View Selected Project</a>
    <a id="deleteValues" class="t-button t-button-icontext"><span class="t-icon t-delete"></span>Delete Selected Projects</a>   
</p>
@(Html.Telerik().Grid<ProjectGridModel>()
        .Name("Grid").Sortable()
        .DataBinding(dataBinding => dataBinding.Ajax().Select("Select", "Project"))
        .Columns(columns =>
        {
            //columns.Bound(o => o.Details).Width(45).Encoded(false).Title("").HtmlAttributes(new { style = "text-align:center" });
            columns.Bound(o => o.Id).Sortable(false).ClientTemplate("<input type='checkbox' name='checkedRecords' value='<#= Id #>' />").Title("").Width(50).HtmlAttributes(new { style = "text-align:center" });
            columns.Bound(o => o.Priority).Width(45);
            columns.Bound(o => o.ProductId);
            columns.Bound(o => o.Name);
            columns.Bound(o => o.Status);
            columns.Bound(o => o.Type);
            columns.Bound(o => o.ProgramManager);
            columns.Bound(o => o.TechnicalLead);
            columns.Bound(o => o.Noise);
            columns.Bound(o => o.CreatedDate).Width(200);
        })
)

@{Html.Telerik().Window().Name("ValueEditWindow").Title("Insert").Content(
      @<text>
    @using (Html.BeginForm( "Insert", "Project", FormMethod.Post, new { id = "ValueEditForm"})) {
        <div class="editLine" style="padding-bottom: 30px;">
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Priority)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Priority)
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.ProductId)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.ProductId)
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Name)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Name)
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Status)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Status)
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.ProgramManager)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.ProgramManager)
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.TechnicalLead)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.TechnicalLead)
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Type)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Type)
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Noise)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Noise)
                </div>
            </div>
        </div>   
    }
    <div id="editResult" class="editLine"></div>            
                <div class="editLine" style="padding-top: 20px;">
                    <a class="t-button t-button-icontext yesButton" onclick="addValue()"><span class="t-icon t-insert"></span><label>Insert</label></a>
                    <a class="t-button t-button-icontext noButton" onclick="closeWindow('ValueEditWindow')"><span class="t-icon t-cancel"></span><label>Cancel</label></a>
                </div>
      </text>).Visible(false).Draggable(true).Scrollable(false).Modal(true).Render();}

@section HeadScripts {
<script src="@Url.Content("~/Scripts/showOperationStatus.js")" type="text/javascript"></script>
<script type="text/javascript">

function addValue() {
    var model = $("#ValueEditForm").serialize();
    
    if ($("#Name").val().trim().length <= 0) {
        showError($("#editResult"), "Please, enter Project Name.", "ValueEditWindow");
        return;
    }
    
        $.post('@Url.Action("Insert", "Project")', model, function (data) {
            if (data == null) {
                $("#Grid").data("tGrid").ajaxRequest();
                closeWindow("ValueEditWindow");
            } else {
                showError($("#editResult"), data, "ValueEditWindow");
            }
        }, 'json');
}

$().ready(function () {

        //Open insert window
        $("#addNewValue").click(function (e) {
            e.preventDefault();
            openWindow('ValueEditWindow');
        });

        //Delete selected values
        $("#deleteValues").click(function (e) {
            e.preventDefault();

            var values = new Array();
            $("input:checkbox[name=checkedRecords]:checked").each(function () {
                values.push($(this).val());
            });

            if (values.length <= 0) {
                alert("Please, check projects to be deleted.");
            } else {
                if (confirm("Are you sure you want to delete these projects?")) {
                    $.ajax({
                        type: 'POST',
                        url: '@(Url.Action("Delete", "Project"))',
                        dataType: 'json',
                        traditional: true,
                        data: { values: values },
                        success: function () {
                            $("#Grid").data("tGrid").ajaxRequest();
                        }
                    });
                }
            }
        });

        //Open details 
        $("#viewValues").click(function () {
            var values = new Array();
            $("input:checkbox[name=checkedRecords]:checked").each(function () {
                values.push($(this));
            });

            if (values.length != 1) {
                alert("Please, check a project to view details.");
            } else {
                window.location = "@(Url.Action("Details", "Project"))/" + values[0].val();
            }
        });
    });
</script>
}
