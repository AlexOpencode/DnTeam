@using DnTeam.Models
@model PersonModel
@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>Edit Person Details</h2>

@using (Html.BeginForm())
{
        <div class="editLine">
        <div class="editElement">
            <div class="editor-label">
                @Html.LabelFor(model => model.Name)
            </div>
            <div class="editor-field updatable">
                @Html.EditorFor(model => model.Name)
            </div>
        </div>
        <div class="editElement">
            <div class="editor-label">
                @Html.LabelFor(model => model.Phone)
            </div>
            <div class="editor-field updatable">
                @Html.EditorFor(model => model.Phone)
            </div>
        </div>
        <div class="editElement">
            <div class="editor-label">
                @Html.LabelFor(model => model.LocatedIn)
            </div>
            <div class="editor-field">
                @(Html.Telerik().DropDownListFor(model => model.LocatedIn).BindTo(ViewData["LocationsList"] as SelectList).HtmlAttributes(new { style = "min-width:250px;" })
                    .ClientEvents(events => events.OnChange("onChangeLocatedIn")))
            </div>
        </div>
        <div class="editElement">
            <div class="editor-label">
                @Html.LabelFor(model => model.DoB)
            </div>
            <div class="editor-field">
                @(Html.Telerik().DatePickerFor(model => model.DoB).ClientEvents(events => events.OnChange("onChangeDoB")))
            </div>
        </div>
        <div class="editElement">
            <div class="editor-label">
                @Html.LabelFor(model => model.PhotoUrl)
            </div>
            <div class="editor-field updatable">
                @Html.TextBoxFor(model => model.PhotoUrl, new { @style="width:300px"})
            </div>
        </div>
        <div class="editElement">
            <div class="editor-label">
                @Html.LabelFor(model => model.OpenId)
            </div>
            <div class="editor-field updatable">
                @Html.TextBoxFor(model => model.OpenId, new { @style="width:300px"})
            </div>
        </div>
        </div>
        <div class="editLine">            
           <div class="editor-label">
               @Html.LabelFor(model => model.Comments)
           </div>
           <div class="editor-field updatable">
               @Html.EditorFor(model => model.Comments)
           </div>            
        </div>
        <div class="editLine">
            <div class="editElement"> 
                <div class="editor-label">
                    @Html.LabelFor(model => model.PrimaryManager)
                </div>
                <div class="editor-field">
                    @(Html.Telerik().DropDownListFor(model => model.PrimaryManager).BindTo(ViewData["PersonsList"] as SelectList).ClientEvents(events => events.OnChange("onChangePrimaryManager")))
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.OtherManagers)
                </div>
                <div class="editor-field">
                    <ul>
                        <li id="addOtherManagers" class="noLiDecoration">
                            <input type="button" value="+ Add Other Managers" class="t-button" onclick="openPersonsWindow('OtherManagers')" /></li>
                        @foreach (var man in Model.OtherManagers)
                        {
                            <li id="OtherManagers@(man.Key)">@(man.Value)
                            <a class="t-button t-button-icontext" onclick="deletePerson('OtherManagers','@(man.Key)')"><span class="t-icon t-delete"></span>Delete</a></li>
                            
                        }
                    </ul>
                </div>
            </div>
        @*</div>
        <div class="editLine">*@
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.PrimaryPeer)
                </div>
                <div class="editor-field">
                    @(Html.Telerik().DropDownListFor(model => model.PrimaryPeer).BindTo(ViewData["PersonsList"] as SelectList).ClientEvents(events => events.OnChange("onChangePrimaryPeer")))
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.OtherPeers)
                </div>
                <div class="editor-field">
                    <ul>
                        <li id="addOtherPeers" class="noLiDecoration">
                            <input type="button" value="+ Add Other Peers" class="t-button" onclick="openPersonsWindow('OtherPeers')" /></li>
                        @foreach (var man in Model.OtherPeers)
                        {
                            <li id="OtherPeers@(man.Key)">@(man.Value)                              
                                 <a class="t-button t-button-icontext" onclick="deletePerson('OtherPeers','@(man.Key)')"><span class="t-icon t-delete"></span>Delete</a></li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="editLine">
            <div class="editor-label">
                Technology Specialties
            </div>
            <div class="editor-field">
                 <p>    
                  <a onclick="insertTechnologySpecialty()" class="t-button t-button-icontext"><span class="t-icon t-add"></span>Add a New Specialty</a>
                  <a onclick="editTechnologySpecialty()" class="t-button t-button-icontext"><span class="t-icon t-edit"></span>Edit Selected Specialty</a>
                  <a onclick="deleteTechnologySpecialties()" class="t-button t-button-icontext"><span class="t-icon t-delete"></span>Delete Selected Specialties</a>
                </p>
                @(Html.Telerik().Grid<SpecialtyModel>()
                .Name("TechnologySpecialtiesGrid")
                .DataKeys(keys => keys.Add(o => o.Name))
                .DataBinding(dataBinding => dataBinding.Ajax().Select("Select", "PersonSpecialty", new { id = Model.Id}))
                .Columns(columns =>
                {
                    columns.Bound(o => o.Name).Sortable(false).ClientTemplate("<input type='checkbox' name='checkedTechnologySpecialty' value='<#= Name #>' />").Title("").Width(50).HtmlAttributes(new { style = "text-align:center" });
                    columns.Bound(o => o.Name);
                    columns.Bound(o => o.Level).Width(100);  
                    columns.Bound(o => o.FirstUsed).Width(100);
                    columns.Bound(o => o.LastUsed).Width(100);
                    columns.Bound(o => o.LastProjectNote).Sortable(false);
                }).Sortable())
            </div>
        </div>
        <div class="editLine">
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.LikesToWorkWith)
                </div>
                <div class="editor-field">
                    <ul>
                        <li id="addLikesToWorkWith" class="noLiDecoration">
                            <input type="button" value="+ Add the People Likes to Work With" class="t-button"
                                onclick="openPersonsWindow('LikesToWorkWith')" /></li>
                        @foreach (var man in Model.LikesToWorkWith)
                        {
                            <li id="LikesToWorkWith@(man.Key)">@(man.Value)                              
                            <a class="t-button t-button-icontext" onclick="deletePerson('LikesToWorkWith','@(man.Key)')"><span class="t-icon t-delete"></span>Delete</a></li>
                        }
                    </ul>
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.DirectReports)
                </div>
                <div class="editor-field">
                    <ul>
                        <li id="addDirectReports" class="noLiDecoration">
                            <input type="button" value="+ Add Direct Reports" class="t-button" onclick="openPersonsWindow('DirectReports')" /></li>
                        @foreach (var man in Model.DirectReports)
                        {
                            <li id="DirectReports@(man.Key)">@(man.Value)
                            <a class="t-button t-button-icontext" onclick="deletePerson('DirectReports','@(man.Key)')"><span class="t-icon t-delete"></span>Delete</a></li>
                        }
                    </ul>
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Links)
                </div>
                <div class="editor-field">
                    <ul>
                        <li id="addLinkLi" class="noLiDecoration">
                            <input type="button" value="+ Add Links" class="t-button" onclick="openWindow('LinksWindow')" /></li>
                        @foreach (var link in Model.Links)
                        {
                            <li id="link@(link)"><a href="@link" target="_blank">@link</a>
                            <a class="t-button t-button-icontext" onclick="deleteLink('@(link)')"><span class="t-icon t-delete"></span>Delete</a></li>
                        }
                    </ul>
                </div>
             </div>
        </div>
}
@{ Html.Telerik().Window()
        .Name("PersonsWindow")
        .Draggable(true)
        .Modal(true)
        .Visible(false)
        .Buttons(b => b.Close())
        .Content(@<text> @Html.Hidden("PersonsPropertyName")
        <div class="editLine">
            <div class="editor-label">Name</div>
            <div class="editor-field">@(Html.Telerik().DropDownList().Name("PersonsPropertyValue").BindTo(ViewData["PersonsList"] as SelectList))</div>
        </div>
        <div class="editLine editButtons">
            <input type="button" value="Add" class="t-button" onclick="addPerson()" />
            <input type="button" value="Cancel" class="t-button" onclick="closeWindow('PersonsWindow')" />
        </div>
    </text>)
        .Width(400)
        .Render();
}
@{ Html.Telerik().Window()
        .Name("LinksWindow")
        .Title("Add a New Link")
        .Draggable(true)
        .Modal(true)
        .Visible(false)
        .Buttons(b => b.Close())
        .Content(@<text>         
        <div class="editLine">
            <div class="editor-label">Link</div>
            <div class="editor-field">@(Html.TextBox("LinkValue", "", new { @style = "width:300px;" }))</div>
        </div>
        <div class="editLine editButtons">
            <input type="button" value="Add" class="t-button" onclick="addLink()" />
            <input type="button" value="Cancel" class="t-button" onclick="closeWindow('LinksWindow')" />
        </div>
    </text>)
        .Width(400)
        .Render();
}
@{ Html.Telerik().Window()
        .Name("TechnologySpecialtiesWindow")
        .Draggable(true)
        .Modal(true)
        .Visible(false)
        .Buttons(b => b.Close())
        .Content(@<text>
    
        <div class="editLine"><div class="editor-label">Name</div>
        @(Html.Telerik().DropDownList().Name("TechnologySpecialtyName").BindTo(ViewData["TechnologySpecialtyNames"] as SelectList))</div>                
        <div class="editLine">
            <div class="editor-label">Level</div>
            <div class="editor-field">
                @foreach (string v in (IEnumerable<string>)ViewData["TechnologySpecialtyLevels"])
                {
                   <div class="technologySpecialtyLevelRadio"><input type="radio" name="TechnologySpecialtyValue" value="@(v)"/> @(v)</div>
                }
            </div>
        </div>
        <div class="editLine">
            <div class="editElement">
                <div class="editor-label">First used</div>
                <div class="editor-field">@(Html.Telerik().DatePicker().Name("TechnologySpecialtyLastUsed"))</div>        
            </div>
            <div class="editElement">
                <div class="editor-label">Last used</div>
                <div class="editor-field">@(Html.Telerik().DatePicker().Name("TechnologySpecialtyExperienceSince"))</div>
            </div>
        </div>
        <div class="editLine">
            <div class="editor-label">Last project note</div>
            <div class="editor-field"> @Html.TextArea("TechnologySpecialtyNote", "", new { cols = "47", @class = "notResizable" })</div>
        </div>
        <div class="editLine"><span id="TechnologySpecialtiesWindowResult  "></span></div>
        <div class="editLine" style="padding-top: 20px;">
            <a class="t-button t-button-icontext yesButton" onclick="saveTechnologySpecialty('false')"><span class="t-icon t-insert"></span><label>Insert</label></a>
            <a class="t-button t-button-icontext noButton" onclick="closeWindow('TechnologySpecialtiesWindow')"><span class="t-icon t-cancel"></span><label>Cancel</label></a>
        </div>
       
    </text>)
        .Width(400)
        .Render();
}

<script src="@Url.Content("~/Scripts/showOperationStatus.js")" type="text/javascript"></script>
<script type="text/javascript">
    function insertTechnologySpecialty() {
        $('#TechnologySpecialtyNote').val('');
        var namedd = $('#TechnologySpecialtyName').data('tDropDownList');
        if (!namedd.data) {
            alert("The are no Technology Specialty names. Please, add some before adding one to the person.");
            return;
        } 
        namedd.select(0);
        namedd.enable();
        var radioBtns = $("input:radio[name=TechnologySpecialtyValue]");
        if (radioBtns.length <= 0) {
            alert("The are no Technology Specialty levels. Please, add some before adding one to the person.");
            return;
        }
        radioBtns.removeAttr("checked");
        radioBtns.first().attr("checked", "checked");
        openWindow('TechnologySpecialtiesWindow', 'Insert', 'Insert', 'saveTechnologySpecialty(\'false\')');
    }

    function saveTechnologySpecialty(update) {
        var name = $('#TechnologySpecialtyName').val();
        var value = $('input[name=TechnologySpecialtyValue]:checked').val();
        var lastUsed = $('#TechnologySpecialtyLastUsed').data("tDatePicker").value().toDateString();
        var expSince = $('#TechnologySpecialtyExperienceSince').data("tDatePicker").value().toDateString();
        var note = $('#TechnologySpecialtyNote').val();

        $.post('@Url.Action("Save", "PersonSpecialty")', { id: '@(Model.Id)', name: name, value: value, lastUsed: lastUsed, firstUsed: expSince, note: note, update: update}, function (data) {
            if (data == '') {
                closeWindow('TechnologySpecialtiesWindow');
                $("#TechnologySpecialtiesGrid").data("tGrid").ajaxRequest();
            } else {
                showError("TechnologySpecialtyNote", data);
            }
        }, 'json');

    }

    function editTechnologySpecialty() {
        var values = new Array();
        $("input:checkbox[name=checkedTechnologySpecialty]:checked").each(function () {
            values.push($(this));
        });

        if (values.length != 1) {
            alert("Please, check one technology specialty to be edited.");
        } else {
            //get cell values
            var ths = values[0].closest('tr').children('td');
            //open edit TechnologySpecialty window
            openEditTechnologySpecialty(values[0].val(), ths[1].innerHTML, ths[2].innerHTML, ths[3].innerHTML, ths[4].innerHTML, ths[5].innerHTML);
        }
    }

    function openEditTechnologySpecialty(id, name, level, firstUsed, lastUsed, note) {
        var namedd = $('#TechnologySpecialtyName').data('tDropDownList');
        namedd.value(name);
        namedd.disable();
        $("input:radio[name:TechnologySpecialtyValue]").removeAttr("checked");
        $('input:radio[name:TechnologySpecialtyValue]').filter("[value=" + level + "]").attr("checked", "checked");
        $('#TechnologySpecialtyLastUsed').data("tDatePicker").value(lastUsed);
        $('#TechnologySpecialtyExperienceSince').data("tDatePicker").value(firstUsed);
        $('#TechnologySpecialtyNote').val(note);

        openWindow('TechnologySpecialtiesWindow', 'Edit', 'Save', 'saveTechnologySpecialty(\'true\')');
    };

    function deleteTechnologySpecialties() {
        var values = new Array();
        $("input:checkbox[name=checkedTechnologySpecialty]:checked").each(function () {
            values.push($(this).val());
        });
        if (values.length <= 0) {
                alert("Please, check specialties to be deleted.");
            } else {
                if (confirm("Are you sure you want to delete these specialties?")) {
                    $.ajax({
                        type: 'POST',
                        url: '@(Url.Action("Delete", "PersonSpecialty"))',
                        dataType: 'json',
                        traditional: true,
                        data: { id: '@(Model.Id)', values: values },
                        success: function () {
                            $("#TechnologySpecialtiesGrid").data("tGrid").ajaxRequest();
                        }
                    });
                }
        }
    }

    function postUpdate(id, val) {
        $.post('@Url.Action("UpdatePersonProperty", "Account")', { id: '@(Model.Id)', name: id, value: val }, function (data) {
            if (data == '') {
                showOk(id);
            } else {
                showError(id, data);
            }
        }, 'json');
    }

    function openPersonsWindow(name) {
        openWindow('PersonsWindow');
        $('#PersonsPropertyName').val(name);
        openWindow('PersonsWindow', 'Add');
    }

    function addPerson() {
        var name = $('#PersonsPropertyName').val();
        var value = $('#PersonsPropertyValue').val();
        var personName = $('#PersonsPropertyValue').data('tDropDownList').text();
        
        if ($('#' + name + value).length > 0) {
            showError('PersonsPropertyValue', 'Item already exisits. Please, try to enter other one.');
        } else {
            $.post('@Url.Action("AddElementToPersonProperty", "Account")', { id: '@(Model.Id)', name: name, value: value }, function (data) {
                if (data == '') {
                    var html = '<li id="' + name + value + '">' + personName + '  <a class="t-button t-button-icontext" onclick="deletePerson(\'' + name + '\',\'' + value + '\')"><span class="t-icon t-delete"></span>Delete</a></li>';
                    $('#add' + name).after(html);
                    $('#PersonsWindow').data('tWindow').close();
                } else {
                    showError('PersonsPropertyValue', data);
                }

            }, 'json');
        }
    }

    function deletePerson(name, value) {
        if (confirm("Are you sure you want to delete this item?")) {
            $.post('@Url.Action("DeleteElementFromPersonProperty", "Account")', { id: '@(Model.Id)', name: name, value: value }, function (data) {
                if (data == '') {
                    $('li#' + name + value).fadeOut(function () {
                        $('li#' + name + value).remove();
                    });
                } else {
                    showError('PersonsPropertyValue', data);
                }
            }, 'json');
        }
    }

    function addLink() {
        var value = $('#LinkValue').val();

        if ($('li#link' + value).length > 0) {
            showError('LinkValue', 'Link already exisits. Please, try to enter other one.');
        } else {

            $.post('@Url.Action("AddElementToPersonProperty", "Account")', { id: '@(Model.Id)', name: 'Links', value: value }, function (data) {
                if (data == '') {
                    var html = '<li><a href="' + value + '" target="_blank">' + value + '</a>  <a class="t-button t-button-icontext"onclick="deleteLink(\'' + value + '\')"><span class="t-icon t-delete"></span>Delete</a></li>';
                    $('#addLinkLi').after(html);
                    $('#LinksWindow').data('tWindow').close();
                } else {
                    showError('LinkValue', data);
                }

            }, 'json');
        }
    }

    function deleteLink(value) {
        if (confirm("Are you sure you want to delete this item?")) {
            $.post('@Url.Action("DeleteElementFromPersonProperty", "Account")', { id: '@(Model.Id)', name: 'Links', value: value }, function (data) {
                if (data == '') {
                    var liLink = $("#addLinkLi").closest("ul").find("a:[href='" + value + "']").closest("li");
                    liLink.fadeOut(function () {
                        liLink.remove();
                    });
                } else {
                    showError('link' + value, data);
                }
            }, 'json');
        }
    }

    function onChangeDoB(e) {
        postUpdate('DoB', e.value.toDateString());
    }
    function onChangeLocatedIn(e) {
        postUpdate('LocatedIn', e.value);
    }
    function onChangePrimaryManager(e) {
        postUpdate('PrimaryManager', e.value);
    }
    function onChangePrimaryPeer(e) {
        postUpdate('PrimaryPeer', e.value);
    }

    $().ready(function () {
        $('.updatable').change(function (e) {
            postUpdate($(e.target).attr('id'), $(e.target).val());
        });
    });

</script>
<p>
    @Html.ActionLink("To Details »", "Details", new { id = Model.Id }, new { @class = "t-button" })
</p>
