@using DnTeam.Models
@model DnTeam.Models.PersonModel
@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>Edit Person Details</h2>

@*<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>*@
@using (Html.BeginForm())
{
        @Html.HiddenFor(model => model.Id)
        <div class="editLine">
        <div class="editElement">
            <div class="editor-label">
                @Html.LabelFor(model => model.Name)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Name)
            </div>
        </div>
        <div class="editElement">
            <div class="editor-label">
                @Html.LabelFor(model => model.Phone)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Phone)
            </div>
        </div>
        <div class="editElement">
            <div class="editor-label">
                @Html.LabelFor(model => model.LocatedIn)
            </div>
            <div class="editor-field">
                @(Html.Telerik().DropDownListFor(model => model.LocatedIn).BindTo(ViewData["LocationsList"] as SelectList).HtmlAttributes(new { style = "min-width:250px;" })
                    .ClientEvents(events => events.OnChange("onChangeLocatedIn")))
            </div>
        </div>
        <div class="editElement">
            <div class="editor-label">
                @Html.LabelFor(model => model.DoB)
            </div>
            <div class="editor-field">
                @(Html.Telerik().DatePickerFor(model => model.DoB).ClientEvents(events => events.OnChange("onChangeDoB")))
            </div>
        </div>
        <div class="editElement">
            <div class="editor-label">
                @Html.LabelFor(model => model.PhotoUrl)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.PhotoUrl)
            </div>
        </div>
        <div class="editElement">
            <div class="editor-label">
                @Html.LabelFor(model => model.OpenId)
            </div>
            <div class="editor-field">
                @Html.TextBoxFor(model => model.OpenId, new { @style="width:300px"})
            </div>
        </div>
        </div>
        <div class="editLine">            
           <div class="editor-label">
               @Html.LabelFor(model => model.Comments)
           </div>
           <div class="editor-field">
               @Html.EditorFor(model => model.Comments)
           </div>            
        </div>
        <div class="editLine">
            <div class="editElement"> 
                <div class="editor-label">
                    @Html.LabelFor(model => model.PrimaryManager)
                </div>
                <div class="editor-field">
                    @(Html.Telerik().DropDownListFor(model => model.PrimaryManager).BindTo(ViewData["PersonsList"] as SelectList).ClientEvents(events => events.OnChange("onChangePrimaryManager")))
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.OtherManagers)
                </div>
                <div class="editor-field">
                    <ul>
                        <li id="addOtherManagers" class="noLiDecoration">
                            <input type="button" value="+ Add Other Managers" class="t-button" onclick="openPersonsWindow('OtherManagers')" /></li>
                        @foreach (var man in Model.OtherManagers)
                        {
                            <li id="OtherManagers@(man.Key)">@(man.Value)<input class="t-button t-icon t-delete" type="button" Value="Delete" onclick="deletePerson('OtherManagers','@(man.Key)')"/></li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="editLine">
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.PrimaryPeer)
                </div>
                <div class="editor-field">
                    @(Html.Telerik().DropDownListFor(model => model.PrimaryPeer).BindTo(ViewData["PersonsList"] as SelectList).ClientEvents(events => events.OnChange("onChangePrimaryPeer")))
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.OtherPeers)
                </div>
                <div class="editor-field">
                    <ul>
                        <li id="addOtherPeers" class="noLiDecoration">
                            <input type="button" value="+ Add Other Peers" class="t-button" onclick="openPersonsWindow('OtherPeers')" /></li>
                        @foreach (var man in Model.OtherPeers)
                        {
                            <li id="OtherPeers@(man.Key)">@(man.Value)
                                <input class="t-button t-icon t-delete" type="button" Value="Delete" onclick="deletePerson('OtherPeers','@(man.Key)')"/></li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="editLine">
            <div class="editor-label">
                @Html.LabelFor(model => model.TechnologySpecialties)
            </div>
            <div class="editor-field">
                <ul>               
                    @foreach (var spec in Model.TechnologySpecialties)
                    {
                        <li id="TechnologySpecialties@(spec.Name)">@spec.Name /Level: @spec.Level, Experience since:
                            @spec.ExperienceSince.ToShortDateString(), Last used: @spec.LastUsed.ToShortDateString(),
                            Last project notes: @spec.LastProjectNote/
                            <input class="t-button t-icon t-edit" type="button" Value="Edit" onclick="openUTechnologySpecialty('@spec.Name', '@spec.Level','@spec.LastUsed','@spec.ExperienceSince', '@spec.LastProjectNote')"/>
                            <input class="t-button t-icon t-delete" type="button" Value="Delete" onclick="deleteTechnologySpecialty('@spec.Name')"/></li>
                    }
                </ul>
                @*TechnologySpecialties*@
                 <input type="button" value="+ Add Specialties" class="t-button" onclick="openWindow('TechnologySpecialtiesWindow')" />
                @(Html.Telerik().Grid<ProjectGridModel>()
                .Name("TechnologySpecialtiesGrid")
                //.ToolBar(commands => commands.Custom().Text("Add Specialties").HtmlAttributes(new { onclick = "openWindow('TechnologySpecialtiesWindow')" }))
                .DataKeys(keys => keys.Add(o => o.Id))
                .DataBinding(dataBinding => dataBinding.Ajax().Select("Select", "Project"))
                .Columns(columns =>
                {
                
                    columns.Bound(o => o.Name);               
                    columns.Bound(o => o.CreatedDate).Width(200);
                }))
            </div>
        </div>
        <div class="editLine">
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.LikesToWorkWith)
                </div>
                <div class="editor-field">
                    <ul>
                        <li id="addLikesToWorkWith" class="noLiDecoration">
                            <input type="button" value="+ Add the People Likes to Work With" class="t-button"
                                onclick="openPersonsWindow('LikesToWorkWith')" /></li>
                        @foreach (var man in Model.LikesToWorkWith)
                        {
                            <li id="LikesToWorkWith@(man.Key)">@(man.Value)
                                <input class="t-button t-icon t-delete" type="button" Value="Delete" onclick="deletePerson('LikesToWorkWith','@(man.Key)')"/></li>
                        }
                    </ul>
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.DirectReports)
                </div>
                <div class="editor-field">
                    <ul>
                        <li id="addDirectReports" class="noLiDecoration">
                            <input type="button" value="+ Add Direct Reports" class="t-button" onclick="openPersonsWindow('DirectReports')" /></li>
                        @foreach (var man in Model.DirectReports)
                        {
                            <li id="DirectReports@(man.Key)">@(man.Value)
                                <input class="t-button t-icon t-delete" type="button" Value="Delete" onclick="deletePerson('DirectReports','@(man.Key)')"/></li>
                        }
                    </ul>
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Links)
                </div>
                <div class="editor-field">
                    <ul>
                        <li id="addLinkLi" class="noLiDecoration">
                            <input type="button" value="+ Add Links" class="t-button" onclick="openWindow('LinksWindow')" /></li>
                        @foreach (var link in Model.Links)
                        {
                            <li id="link@(link)"><a href="@link" target="_blank">@link</a>
                                <input class="t-button t-icon t-delete" type="button" Value="Delete" onclick="deleteLink('@(link)')"/></li>
                        }
                    </ul>
                </div>
             </div>
        </div>
}
@{ Html.Telerik().Window()
        .Name("PersonsWindow")
        .Draggable(true)
        .Modal(true)
        .Visible(false)
        .Buttons(b => b.Close())
        .Content(@<text> @Html.Hidden("PersonsPropertyName")
        <div class="editLine">
            <div class="editor-label">Name</div>
            <div class="editor-field">@(Html.Telerik().DropDownList().Name("PersonsPropertyValue").BindTo(ViewData["PersonsList"] as SelectList))</div>
        </div>
        <div class="editLine editButtons">
            <input type="button" value="Add" class="t-button" onclick="addPerson()" />
            <input type="button" value="Cancel" class="t-button" onclick="closeWindow('PersonsWindow')" />
        </div>
    </text>)
        .Width(400)
        .Render();
}
@{ Html.Telerik().Window()
        .Name("LinksWindow")
        .Title("Add a New Link")
        .Draggable(true)
        .Modal(true)
        .Visible(false)
        .Buttons(b => b.Close())
        .Content(@<text>         
        <div class="editLine">
            <div class="editor-label">Link</div>
            <div class="editor-field">@(Html.TextBox("LinkValue", "", new { @style = "width:300px;" }))</div>
        </div>
        <div class="editLine editButtons">
            <input type="button" value="Add" class="t-button" onclick="addLink()" />
            <input type="button" value="Cancel" class="t-button" onclick="closeWindow('LinksWindow')" />
        </div>
    </text>)
        .Width(400)
        .Render();
}
@{ Html.Telerik().Window()
        .Name("TechnologySpecialtiesWindow")
        .Title("Add a Technology Specialty")
        .Draggable(true)
        .Modal(true)
        .Visible(false)
        .Buttons(b => b.Close())
        .Content(@<text>
    
        <div class="editLine"><div class="editor-label">Name</div>
        @(Html.Telerik().DropDownList().Name("TechnologySpecialtyName").BindTo(ViewData["TechnologySpecialtyNames"] as SelectList))</div>
        @*<li>Level: @(Html.Telerik().Slider<int>().Name("TechnologySpecialtyValue").Value(1).Min(1).Max(10).TickPlacement(SliderTickPlacement.None))</li>*@        
        <div class="editLine">
            <div class="editor-label">Level</div>
            <div class="editor-field">
                @foreach (string v in ViewData["TechnologySpecialtyLevels"] as List<string>)
                {
                   <div class="technologySpecialtyLevelRadio"><input type="radio" name="TechnologySpecialtyValue" value="@(v)"/> @(v)</div>
                }
            </div>
        </div>
        <div class="editLine">
            <div class="editElement">
                <div class="editor-label">First used</div>
                <div class="editor-field">@(Html.Telerik().DatePicker().Name("TechnologySpecialtyLastUsed"))</div>        
            </div>
            <div class="editElement">
                <div class="editor-label">Last used</div>
                <div class="editor-field">@(Html.Telerik().DatePicker().Name("TechnologySpecialtyExperienceSince"))</div>
            </div>
        </div>
        <div class="editLine">
            <div class="editor-label">Last project note</div>
            <div class="editor-field"> @Html.TextArea("TechnologySpecialtyNote", "", new { cols = "47" })</div>
        </div>
        <div class="editLine"><span id="TechnologySpecialtiesWindowResult  "></span></div>
        <div class="editLine editButtons">
            <input type="button" value="Ok" class="t-button" onclick="addTechnologySpecialty()" />
            <input type="button" value="Cancel" class="t-button" onclick="closeWindow('TechnologySpecialtiesWindow')" />
        </div>
    </text>)
        .Width(400)
        .Render();
}
@{ Html.Telerik().Window()
        .Name("UTechnologySpecialtiesWindow")
        .Title("Edit Technology Specialty")
        .Draggable(true)
        .Modal(true)
        .Visible(false)
        .Buttons(b => b.Close())
        .Content(@<text>
    <ul>
        <li>Name: @(Html.TextBox("UTechnologySpecialtyName", "", new { @readonly = true }))</li>
        <li>Level: @(Html.Telerik().Slider<int>().Name("UTechnologySpecialtyValue").Value(1).Min(1).Max(10).TickPlacement(SliderTickPlacement.None))</li>
        <li>Last used: @(Html.Telerik().DatePicker().Name("UTechnologySpecialtyLastUsed"))</li>
        <li>Experience since: @(Html.Telerik().DatePicker().Name("UTechnologySpecialtyExperienceSince"))</li>
        <li>Last project note: @Html.TextArea("UTechnologySpecialtyNote")</li>
    </ul>
    <div class="editLine editButtons">
        <input type="button" value="Save" class="t-button" onclick="updateTechnologySpecialty()" />
        <input type="button" value="Cancel" class="t-button" onclick="closeWindow('UTechnologySpecialtiesWindow')" />
    </div>
    </text>)
        .Width(400)
        .Height(300)
        .Render();
}
<script src="@Url.Content("~/Scripts/showOperationStatus.js")" type="text/javascript"></script>
<script type="text/javascript">

    function addTechnologySpecialty() {
        var name = $('#TechnologySpecialtyName').val();
        var value = $('#TechnologySpecialtyValue').data("tSlider").value();
        var lastUsed = $('#TechnologySpecialtyLastUsed').data("tDatePicker").value().toDateString();
        var expSince = $('#TechnologySpecialtyExperienceSince').data("tDatePicker").value().toDateString();
        var note = $('#TechnologySpecialtyNote').val();

        if ($('#TechnologySpecialties' + name).length > 0) {
            showError('TechnologySpecialtyNote', 'Specialty already exisits. Please, try to enter other one.');
        } else {

            $.post('@Url.Action("AddTechnologySpecialty", "Account")', { id: $('#Id').val(), name: name, value: value, lastUsed: lastUsed, expSince: expSince, note: note }, function(data) {
                if (data == '') {
                    var html = "<li id=\"TechnologySpecialties" + name + "\">" + name + " /Level: " + value + ", Experience since: " + expSince + ", Last used: " + lastUsed
                        + ", Last project notes: " + note + "/ <input class=\"t-button t-icon t-edit\" type=\"button\" Value=\"Edit\" onclick=\"openUTechnologySpecialty(\'" + name
                            + "', \'" + value + "',\'" + lastUsed + "\',\'" + expSince + "\', \'" + note
                                + "\')\"/> <input class=\"t-button t-icon t-delete\" type=\"button\" Value=\"Delete\" onclick=\"deleteTechnologySpecialty(\'" + name + "\')\"/></li>";

                    $('#addTechnologySpecialties').after(html);

                    closeWindow('TechnologySpecialtiesWindow');
                } else {
                    showError("TechnologySpecialtyNote", data);
                }
            }, 'json');
        }
    }

    function updateTechnologySpecialty() {
        var name = $('#UTechnologySpecialtyName').val();
        var value = $('#UTechnologySpecialtyValue').data("tSlider").value();
        var lastUsed = $('#UTechnologySpecialtyLastUsed').data("tDatePicker").value().toDateString();
        var expSince = $('#UTechnologySpecialtyExperienceSince').data("tDatePicker").value().toDateString();
        var note = $('#UTechnologySpecialtyNote').val();
        $.post('@Url.Action("UpdateTechnologySpecialty", "Account")', { id: $('#Id').val(), name: name, value: value, lastUsed: lastUsed, expSince: expSince, note: note }, function (data) {
            if (data == '') {
                
                var html = "<li id=\"TechnologySpecialties" + name + "\">" + name + " /Level: " + value + ", Experience since: " + expSince + ", Last used: " + lastUsed
                        + ", Last project notes: " + note + "/ <input class=\"t-button t-icon t-edit\" type=\"button\" Value=\"Edit\" onclick=\"openUTechnologySpecialty(\'" + name
                            + "', \'" + value + "',\'" + lastUsed + "\',\'" + expSince + "\', \'" + note
                                + "\')\"/> <input class=\"t-button t-icon t-delete\" type=\"button\" Value=\"Delete\" onclick=\"deleteTechnologySpecialty(\'" + name + "\')\"/></li>";
                
                $('li#TechnologySpecialties' + name).remove();
                $('#addTechnologySpecialties').after(html);
                 closeWindow('UTechnologySpecialtiesWindow');
            } else {
                 showError("TechnologySpecialtiesWindowResult", data);
            }
        }, 'json');
    }

    function openUTechnologySpecialty(name, value, lastUsed, expSince, note) {
        $('#UTechnologySpecialtyName').val(name);
        $('#UTechnologySpecialtyValue').data("tSlider").value(value);
        $('#UTechnologySpecialtyLastUsed').data("tDatePicker").value(lastUsed);
        $('#UTechnologySpecialtyExperienceSince').data("tDatePicker").value(expSince);
        $('#UTechnologySpecialtyNote').val(note);
        openWindow('UTechnologySpecialtiesWindow');
    }

    function deleteTechnologySpecialty(name) {
        if (confirm("Are you sure you want to delete this item?")) {
            $.post('@Url.Action("DeleteTechnologySpecialty", "Account")', { id: $('#Id').val(), name: name }, function(data) {
                if (data == '') {
                    $('li#TechnologySpecialties' + name).fadeOut(function () {
                        $('li#TechnologySpecialties' + name).remove();
                    });
                } else {
                    showError("TechnologySpecialties", data);
                }
            }, 'json');
        }
    }

    function postUpdate(id, val) {
        $.post('@Url.Action("UpdatePersonProperty", "Account")', { id: $('#Id').val(), name: id, value: val }, function (data) {
            if (data == '') {
                showOk(id);
            } else {
                showError(id, data);
            }
        }, 'json');
    }

    function openPersonsWindow(name) {
        $('#PersonsPropertyName').val(name);
        $('#PersonsWindow').data('tWindow').title("Add").center().open();
    }

    function openWindow(name) {
        $('#' + name).data('tWindow').center().open();
    }

    function closeWindow(name) {
        $('#' + name).data('tWindow').close();
    }


    function addPerson() {
        var name = $('#PersonsPropertyName').val();
        var value = $('#PersonsPropertyValue').val();
        var personName = $('#PersonsPropertyValue').data('tDropDownList').text();
        
        if ($('#' + name + value).length > 0) {
            showError('PersonsPropertyValue', 'Item already exisits. Please, try to enter other one.');
        } else {
            $.post('@Url.Action("AddElementToPersonProperty", "Account")', { id: $('#Id').val(), name: name, value: value }, function (data) {
                if (data == '') {
                    var html = '<li id="' + name + value + '">' + personName + '  <input class="t-button t-icon t-delete" type="button" Value="Delete" onclick="deletePerson(\'' + name + '\',\'' + value + '\')"/></li>';
                    $('#add' + name).after(html);
                    $('#PersonsWindow').data('tWindow').close();
                } else {
                    showError('PersonsPropertyValue', data);
                }

            }, 'json');
        }
    }

    function deletePerson(name, value) {
        if (confirm("Are you sure you want to delete this item?")) {
            $.post('@Url.Action("DeleteElementFromPersonProperty", "Account")', { id: $('#Id').val(), name: name, value: value }, function(data) {
                if (data == '') {
                    $('li#' + name + value).fadeOut(function () {
                        $('li#' + name + value).remove();
                    });
                } else {
                    showError('PersonsPropertyValue', data);
                }
            }, 'json');
        }
    }

    function addLink() {
        var value = $('#LinkValue').val();

        if ($('li#link' + value).length > 0) {
            showError('LinkValue', 'Link already exisits. Please, try to enter other one.');
        } else {

            $.post('@Url.Action("AddElementToPersonProperty", "Account")', { id: $('#Id').val(), name: 'Links', value: value }, function (data) {
                if (data == '') {
                    var html = '<li id="link' + value + '"><a href="' + value + '" target="_blank">' + value + '</a>  <input class="t-button t-icon t-delete" type="button" Value="Delete" onclick="deleteLink(\'' + value + '\')"/></li>';
                    $('#addLinkLi').after(html);
                    $('#LinksWindow').data('tWindow').close();
                } else {
                    showError('LinkValue', data);
                }

            }, 'json');
        }
    }

    function deleteLink(value) {
        if (confirm("Are you sure you want to delete this item?")) {
            $.post('@Url.Action("DeleteElementFromPersonProperty", "Account")', { id: $('#Id').val(), name: 'Links', value: value }, function(data) {
                if (data == '') {
                    $('li#link' + value).fadeOut(function() {
                        $('li#' + value).remove();
                    });
                } else {
                    showError('link' + value, data);
                }
            }, 'json');
        }
    }

    function onChangeDoB(e) {
        postUpdate('DoB', e.value.toDateString());
    }
    function onChangeLocatedIn(e) {
        postUpdate('LocatedIn', e.value);
    }
    function onChangePrimaryManager(e) {
        postUpdate('PrimaryManager', e.value);
    }
    function onChangePrimaryPeer(e) {
        postUpdate('PrimaryPeer', e.value);
    }

    $().ready(function () {
        $('.editor-field input[type="text"]').change(function () { postUpdate($(this).attr('id'), $(this).val()); });
        $("#Comments").change(function () { postUpdate($(this).attr('id'), $(this).val()); });
    });

</script>
<p>
    @Html.ActionLink("To Details »", "Details", new { id = Model.Id }, new { @class = "t-button" })
</p>
