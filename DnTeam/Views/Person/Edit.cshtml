@using DnTeam.Models
@model PersonModel
@{
    ViewBag.Title = Resources.Labels.People_Edit_Title;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>@Resources.Labels.People_Edit_Title</h2>

@using (Html.BeginForm())
{
        <div class="editLine">
        <div class="editElement">
            <div class="editor-label">
                @Html.LabelFor(model => model.Name)
            </div>
            <div class="editor-field updatable">
                @Html.EditorFor(model => model.Name)
            </div>
        </div>
        <div class="editElement">
            <div class="editor-label">
                @Html.LabelFor(model => model.Phone)
            </div>
            <div class="editor-field updatable">
                @Html.EditorFor(model => model.Phone)
            </div>
        </div>
        <div class="editElement">
            <div class="editor-label">
                @Html.LabelFor(model => model.LocatedIn)
            </div>
            <div class="editor-field">
                @(Html.Telerik().DropDownListFor(model => model.LocatedIn).BindTo(ViewData["LocationsList"] as SelectList).HtmlAttributes(new { style = "min-width:250px;" })
                    .ClientEvents(events => events.OnChange("onChangeLocatedIn")))
            </div>
        </div>
        <div class="editElement">
            <div class="editor-label">
                @Html.LabelFor(model => model.DoB)
            </div>
            <div class="editor-field">
                @(Html.Telerik().DatePickerFor(model => model.DoB).ClientEvents(events => events.OnChange("onChangeDoB")))
            </div>
        </div>
        <div class="editElement">
            <div class="editor-label">
                @Html.LabelFor(model => model.PhotoUrl)
            </div>
            <div class="editor-field updatable">
                @Html.TextBoxFor(model => model.PhotoUrl, new { @style = "width:300px" })
            </div>
        </div>
        <div class="editElement">
            <div class="editor-label">
                @Html.LabelFor(model => model.OpenId)
            </div>
            <div class="editor-field updatable">
                @Html.TextBoxFor(model => model.OpenId, new { @style = "width:300px" })
            </div>
        </div>
        </div>
        <div class="editLine">            
           <div class="editor-label">
               @Html.LabelFor(model => model.Comments)
           </div>
           <div class="editor-field updatable">
               @Html.EditorFor(model => model.Comments)
           </div>            
        </div>
        <div class="editLine">
            <div class="editElement"> 
                <div class="editor-label">
                    @Html.LabelFor(model => model.PrimaryManager)
                </div>
                <div class="editor-field">
                    @(Html.Telerik().DropDownListFor(model => model.PrimaryManager).BindTo((ViewData["NullablePersonsList"] as SelectList)).ClientEvents(events => events.OnChange("onChangePrimaryManager")))
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.OtherManagers)
                </div>
                <div class="editor-field">
                    <ul>    <li id="addOtherManagers" class="noLiDecoration">
                            <a class="t-button" onclick="openPersonsWindow('OtherManagers')"><span class="t-icon t-add"></span>@Resources.Labels.People_Add_Other_Managers</a></li>
                        @foreach (var man in Model.OtherManagers)
                        {
                            <li id="OtherManagers@(man.Key)">@(man.Value)
                            <a class="t-button t-button-icontext" onclick="deletePerson('OtherManagers','@(man.Key)')"><span class="t-icon t-delete"></span>@Resources.Labels.Button_Delete</a></li>
                        }
                    </ul>
                </div>
            </div>
        @*</div>
        <div class="editLine">*@
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.PrimaryPeer)
                </div>
                <div class="editor-field">
                    @(Html.Telerik().DropDownListFor(model => model.PrimaryPeer).BindTo(ViewData["NullablePersonsList"] as SelectList).ClientEvents(events => events.OnChange("onChangePrimaryPeer")))
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.OtherPeers)
                </div>
                <div class="editor-field">
                    <ul>
                        <li id="addOtherPeers" class="noLiDecoration">
                            <a class="t-button" onclick="openPersonsWindow('OtherPeers')"><span class="t-icon t-add"></span>@Resources.Labels.People_Add_Other_Peers</a></li>
                        @foreach (var man in Model.OtherPeers)
                        {
                            <li id="OtherPeers@(man.Key)">@(man.Value)                              
                                 <a class="t-button t-button-icontext" onclick="deletePerson('OtherPeers','@(man.Key)')"><span class="t-icon t-delete"></span>@Resources.Labels.Button_Delete</a></li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="editLine">
            <div class="editor-label">
                @Resources.Labels.People_Technology_Specialties
            </div>
            <div class="editor-field">
                @Html.Partial("TechnologySpecialtiesGrid", Model)
            </div>
        </div>
        <div class="editLine">
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.LikesToWorkWith)
                </div>
                <div class="editor-field">
                    <ul>
                        <li id="addLikesToWorkWith" class="noLiDecoration">
                        <a class="t-button" onclick="openPersonsWindow('LikesToWorkWith')"><span class="t-icon t-add"></span>@Resources.Labels.People_Add_Likes_to_Work_With</a></li>
                        @foreach (var man in Model.LikesToWorkWith)
                        {
                            <li id="LikesToWorkWith@(man.Key)">@(man.Value)                              
                            <a class="t-button t-button-icontext" onclick="deletePerson('LikesToWorkWith','@(man.Key)')"><span class="t-icon t-delete"></span>@Resources.Labels.Button_Delete</a></li>
                        }
                    </ul>
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.DirectReports)
                </div>
                <div class="editor-field">
                    <ul>
                        <li id="addDirectReports" class="noLiDecoration">
                            <a class="t-button" onclick="openPersonsWindow('DirectReports')"><span class="t-icon t-add"></span>@Resources.Labels.People_Add_Direct_Reports</a></li>
                        @foreach (var man in Model.DirectReports)
                        {
                            <li id="DirectReports@(man.Key)">@(man.Value)
                            <a class="t-button t-button-icontext" onclick="deletePerson('DirectReports','@(man.Key)')"><span class="t-icon t-delete"></span>@Resources.Labels.Button_Delete</a></li>
                        }
                    </ul>
                </div>
            </div>
            <div class="editElement">
                <div class="editor-label">
                    @Html.LabelFor(model => model.Links)
                </div>
                <div class="editor-field">
                    <ul>
                        <li id="addLinkLi" class="noLiDecoration">
                            <a class="t-button" onclick="openWindow('LinksWindow')"><span class="t-icon t-add"></span>@Resources.Labels.People_Add_Links</a></li>
                        @foreach (var link in Model.Links)
                        {
                            <li id="link@(link)"><a href="@link" target="_blank">@link</a>
                            <a class="t-button t-button-icontext" onclick="deleteLink('@(link)')"><span class="t-icon t-delete"></span>@Resources.Labels.Button_Delete</a></li>
                        }
                    </ul>
                </div>
             </div>
        </div>
}

<p>
    @Html.ActionLink(Resources.Labels.To_Details, "Details", new { id = Model.Id }, new { @class = "t-button" })
</p>

@{ Html.Telerik().Window()
        .Name("PersonsWindow")
        .Draggable(true)
        .Modal(true)
        .Visible(false)
        .Buttons(b => b.Close())
        .Content(@<text> @Html.Hidden("PersonsPropertyName")
        <div class="editLine">
            <div class="editor-label">@Resources.Labels.People_Name</div>
            <div class="editor-field">@(Html.Telerik().DropDownList().Name("PersonsPropertyValue").BindTo(ViewData["PersonsList"] as SelectList))</div>
        </div>
        <div class="editLine editButtons">
            <a class="t-button" onclick="addPerson()"><span class="t-icon t-insert"></span>@Resources.Labels.Window_Button_Insert</a>
            <a class="t-button" onclick="closeWindow('PersonsWindow')" ><span class="t-icon t-delete"></span>@Resources.Labels.Window_Button_Cancel</a>
        </div>
    </text>)
        .Width(400)
        .Render();
}
@{ Html.Telerik().Window()
        .Name("LinksWindow")
        .Title(Resources.Labels.People_Add_Links)
        .Draggable(true)
        .Modal(true)
        .Visible(false)
        .Buttons(b => b.Close())
        .Content(@<text>         
        <div class="editLine">
            <div class="editor-label">@Resources.Labels.People_Link</div>
            <div class="editor-field">@(Html.TextBox("LinkValue", "", new { @style = "width:300px;" }))</div>
        </div>
        <div class="editLine editButtons">            
            <a class="t-button" onclick="addLink()"><span class="t-icon t-insert"></span>@Resources.Labels.Window_Button_Insert</a>
            <a class="t-button" onclick="closeWindow('LinksWindow')" ><span class="t-icon t-delete"></span>@Resources.Labels.Window_Button_Cancel</a>
        </div>
    </text>)
        .Width(400)
        .Render();
}


@section HeadScripts {
<script type="text/javascript">
    function postUpdate(id, val, resultDiv) {
        $.post('@Url.Action("UpdatePersonProperty", "Person")', { id: '@(Model.Id)', name: id, value: val }, function (data) {
            if (data == null) {
                if (resultDiv) {
                    showOk(resultDiv);
                } else {
                    showOk($('#' + id));
                }
            } else {
                if (resultDiv) {
                    showError(resultDiv, data);
                } else {
                    showError($('#' + id), data);
                }
            }
        }, 'json');
    }

    function openPersonsWindow(name) {
        openWindow('PersonsWindow');
        $('#PersonsPropertyName').val(name);
        openWindow('PersonsWindow', 'Add');
    }

    function addPerson() {
        var name = $('#PersonsPropertyName').val();
        var value = $('#PersonsPropertyValue').val();
        var personName = $('#PersonsPropertyValue').data('tDropDownList').text();
        
        if ($('#' + name + value).length > 0) {
            showError($('#PersonsPropertyValue'), '@(Resources.Labels.Error_Item_Exists)', 'PersonsWindow');
        } else {
            $.post('@Url.Action("AddElementToPersonProperty", "Person")', { id: '@(Model.Id)', name: name, value: value }, function (data) {
                if (data == '') {
                    var html = '<li id="' + name + value + '">' + personName + '  <a class="t-button t-button-icontext" onclick="deletePerson(\'' + name + '\',\'' + value + '\')"><span class="t-icon t-delete"></span>Delete</a></li>';
                    $('#add' + name).after(html);
                    closeWindow('PersonsWindow');
                } else {
                    showError($('#PersonsPropertyValue'), data, 'PersonsWindow');
                }

            }, 'json');
        }
    }

    function deletePerson(name, value) {
        if (confirm("@(Resources.Labels.Delete_One_Are_You_Sure)")) {
            $.post('@Url.Action("DeleteElementFromPersonProperty", "Person")', { id: '@(Model.Id)', name: name, value: value }, function (data) {
                if (data == null) {
                    var $li = $('li#' + name + value);
                    $li.fadeOut(function () {
                        $li.remove();
                    });
                } else {
                    showError($('#PersonsPropertyValue'), data);
                }
            }, 'json');
        }
    }

    function addLink() {
        var value = $('#LinkValue').val();

        if ($('li#link' + value).length > 0) {
            showError($('#LinkValue'), '@(Resources.Labels.People_Error_Link_Exists)', 'LinksWindow');
        } else {

        $.post('@Url.Action("AddElementToPersonProperty", "Person")', { id: '@(Model.Id)', name: 'Links', value: value }, function (data) {
            if (data == '') {
                var html = '<li><a href="' + value + '" target="_blank">' + value + '</a>  <a class="t-button t-button-icontext"onclick="deleteLink(\'' + value + '\')"><span class="t-icon t-delete"></span>Delete</a></li>';
                $('#addLinkLi').after(html);
                closeWindow('LinksWindow');
            } else {
                showError($('#LinkValue'), data, 'LinksWindow');
            }

        }, 'json');
        }
    }

    function deleteLink(value) {
        if (confirm("@(Resources.Labels.Delete_One_Are_You_Sure)")) {
            $.post('@Url.Action("DeleteElementFromPersonProperty", "Person")', { id: '@(Model.Id)', name: 'Links', value: value }, function (data) {
                if (data == null) {
                    var $liLink = $("#addLinkLi").closest("ul").find("a:[href='" + value + "']").closest("li");
                    $liLink.fadeOut(function () {
                        $liLink.remove();
                    });
                } else {
                    showError($('#link' + value), data);
                }
            }, 'json');
        }
    }

    function onChangeDoB(e) {
        var parentdiv = $("#DoB").closest(".editor-field");
        var value = (e.value == null) ? "" : e.value.toDateString();
        postUpdate('DoB', value, $(parentdiv));
    }
    function onChangeLocatedIn(e) {
        var parentdiv = $("#LocatedIn").closest(".editor-field");
        postUpdate('LocatedIn', e.value, $(parentdiv));
    }
    function onChangePrimaryManager(e) {
        var parentdiv = $("#PrimaryManager").closest(".editor-field");
        postUpdate('PrimaryManager', e.value, $(parentdiv));
    }
    function onChangePrimaryPeer(e) {
        var parentdiv = $("#PrimaryPeer").closest(".editor-field");
        postUpdate('PrimaryPeer', e.value, $(parentdiv));
    }

    $().ready(function () {
        
        $('.updatable').change(function (e) {
            postUpdate($(e.target).attr('id'), $(e.target).val());
        });
    });

</script>
}
